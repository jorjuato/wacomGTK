#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk
import gtk.glade
import gobject
import drawingarea_handlers


class WacomDrawWindow:
	
	def __init__(self):
		gladefile="gtkperiment.glade"
		windowname="draw_window"
		self.wTree=gtk.glade.XML (gladefile,windowname)
		self.MainWindow = self.wTree.get_widget("draw_window")
		self.DrawingFrame = self.wTree.get_widget("drawingalignment")
		
		self.DrawingArea = WacomWidget(gc)
		self.DrawingArea.show()
		self.DrawingFrame.add(self.DrawingArea)
		self.DrawingArea.set_extension_events(gtk.gdk.EXTENSION_EVENTS_ALL)
			
		gc = self.DrawingArea.window.new_gc()
		#self.MainWindow.run()
		#self.MainWindow.hide()
		

			
class WacomWidget(gtk.DrawingArea,DrawHandlers):
	"""
		Este widget contiene la definicion del area de dibujo que se empleará
		durante los experimentos. Deriva de un area de dibujo estándar (aunque a 
		través de esta implementación se pretende hacer independiente el tipo de 
		contexto gráfico del control de eventos y las salidas gráficas) y de la 
		clase DrawHandlers, que contiene la definición de todas las estructuras 
		de respuesta a eventos que se requerirán en cada experimento.
	"""
	
	def __init__(self):
		gtk.DrawingArea.__init__(self)
		self.gc = self.window.new_gc()
		self.Device = 0
		self.DeviceMode = None
		self.DeviceName = None
		self.WindowSize = None
		
		self.set_events(gtk.gdk.POINTER_MOTION_MASK  | gtk.gdk.BUTTON_MOTION_MASK | gtk.gdk.BUTTON1_MOTION_MASK \
						| gtk.gdk.BUTTON2_MOTION_MASK | gtk.gdk.BUTTON3_MOTION_MASK | gtk.gdk.BUTTON_PRESS_MASK \
						| gtk.gdk.BUTTON_RELEASE_MASK)
		self.connect("configure-event", self.ConfigureEvent)
		self.connect("expose-event", self.ExposeEvent)
		self.connect("motion-notify-event", self.MotionEvent)
		self.connect("button-press-event", self.ButtonPress)
		self.connect("button-release-event", self.ButtonRelease)
		
		self.Radius = 5.0
		self.Drawing = False
		self.oldx = 0
		self.oldy = 0
